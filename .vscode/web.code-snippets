{
  "Reducer Boilerplate": {
    "prefix": "boiler_reducer",
    "body": [
      "import {",
      "  RESET_STATE,",
      "  SET_INITIAL_STATE,",
      "} from '${TM_DIRECTORY/.*src(\\/[^\\/]*)(\\/[^\\/]*)?(\\/[^\\/]*)?(\\/[^\\/]*)?/${1:+../}${2:+../}${3:+../}${4:+../}/}SystemIntents';",
      "import {",
      "  SET_LOADING_STATE,",
      "} from './$1Intents';",
      "import createReducer from '${TM_DIRECTORY/.*src(\\/[^\\/]*)(\\/[^\\/]*)?(\\/[^\\/]*)?(\\/[^\\/]*)?/${1:+../}${2:+../}${3:+../}${4:+../}/}store/createReducer';",
      "",
      "const getDefaultState = () => ({",
      "  isLoading: true,",
      "});",
      "",
      "const setLoadingState = (state, action) => ({",
      "  ...state,",
      "  isLoading: action.isLoading,",
      "});",
      "",
      "const setInitalState = (state, action) => ({",
      "  ...state,",
      "  ...action.context,",
      "});",
      "",
      "const resetState = () => (getDefaultState());",
      "",
      "const handlers = {",
      "  [SET_LOADING_STATE]: setLoadingState,",
      "  [SET_INITIAL_STATE]: setInitalState,",
      "  [RESET_STATE]: resetState,",
      "};",
      "",
      "const ${TM_FILENAME/(.*).js/${1}/} = createReducer(getDefaultState(), handlers);",
      "",
      "export default ${TM_FILENAME/(.*).js/${1}/};",
      ""
    ],
    "description": "Reducer Boilerplate"
  },
  "Module Boilerplate": {
    "prefix": "boiler_module",
    "body": [
      "import { Provider } from 'react-redux';",
      "import React from 'react';",
      "",
      "import {",
      "  SET_LOADING_STATE,",
      "} from './$1Intents';",
      "import {",
      "  RESET_STATE,",
      "  SET_INITIAL_STATE,",
      "} from '${TM_DIRECTORY/.*src(\\/[^\\/]*)(\\/[^\\/]*)?(\\/[^\\/]*)?(\\/[^\\/]*)?/${1:+../}${2:+../}${3:+../}${4:+../}/}SystemIntents';",
      "import { getBusinessId } from './$1Selectors';",
      "import $1View from './components/$1View';",
      "import Store from '${TM_DIRECTORY/.*src(\\/[^\\/]*)(\\/[^\\/]*)?(\\/[^\\/]*)?(\\/[^\\/]*)?/${1:+../}${2:+../}${3:+../}${4:+../}/}store/Store';",
      "import $2Reducer from './$2Reducer';",
      "",
      "export default class $1Module {",
      "  constructor({",
      "    integration, setRootView,",
      "  }) {",
      "    this.integration = integration;",
      "    this.setRootView = setRootView;",
      "    this.store = new Store($2Reducer);",
      "  }",
      "",
      "  render = () => {",
      "    const $2View = (",
      "      <$1View />",
      "    );",
      "",
      "    const wrappedView = (",
      "      <Provider store={this.store}>",
      "        {$2View}",
      "      </Provider>",
      "    );",
      "    this.setRootView(wrappedView);",
      "  }",
      "",
      "  unsubscribeFromStore = () => {",
      "    this.store.unsubscribeAll();",
      "  }",
      "",
      "  setLoadingState = (isLoading) => {",
      "    const intent = SET_LOADING_STATE;",
      "    this.store.dispatch({",
      "      intent,",
      "      isLoading,",
      "    });",
      "  }",
      "",
      "  setInitialState = (context) => {",
      "    const intent = SET_INITIAL_STATE;",
      "",
      "    this.store.dispatch({",
      "      intent,",
      "      context,",
      "    });",
      "  }",
      "",
      "  run(context) {",
      "    this.setInitialState(context);",
      "    this.render();",
      "    this.setLoadingState(true);",
      "  }",
      "",
      "  resetState = () => {",
      "    const intent = RESET_STATE;",
      "    this.store.dispatch({",
      "      intent,",
      "    });",
      "  };",
      "}",
      ""
    ],
    "description": ""
  },
  "Intents Boilerplate": {
    "prefix": "boiler_intents",
    "body": [
      "export const LOAD_$1 = Symbol('Load $2');",
      "export const SET_LOADING_STATE = Symbol('Set loading state');",
      ""
    ],
    "description": "Intents Boilerplate"
  },
  "getRoutes Boilerplate": {
    "prefix": "boiler_get_routes",
    "body": [
      "import $1Module from './$1Module';",
      "",
      "const ${TM_FILENAME/(.*).js/${1}/} = ({",
      "  integration, setRootView,",
      "}) => {",
      "  const routes = [",
      "    {",
      "      name: '$2',",
      "      path: '/',",
      "      module: new $1Module({",
      "        integration, setRootView,",
      "      }),",
      "    },",
      "  ];",
      "",
      "  return routes;",
      "};",
      "",
      "export default ${TM_FILENAME/(.*).js/${1}/};",
      ""
    ],
    "description": "getRoutes Boilerplate"
  },
  "View Boilerplate": {
    "prefix": "boiler_view",
    "body": [
      "import {",
      "  Spinner,",
      "} from '@myob/myob-widgets';",
      "import { connect } from 'react-redux';",
      "import React from 'react';",
      "",
      "import {",
      "  getIsLoading,",
      "} from '../$1Selectors';",
      "",
      "const ${TM_FILENAME/(.*).js/${1}/} = ({",
      "  isLoading,",
      "}) => {",
      "  const view = (",
      "    <div>View</div>",
      "  );",
      "",
      "  return isLoading ? <Spinner /> : view;",
      "};",
      "",
      "const mapStateToProps = state => ({",
      "  isLoading: getIsLoading(state),",
      "});",
      "",
      "export default connect(mapStateToProps)(${TM_FILENAME/(.*).js/${1}/});",
      ""
    ],
    "description": "View Boilerplate"
  },
  "Selectors Boilerplate": {
    "prefix": "boiler_selectors",
    "body": [
      "export const getBusinessId = state => state.businessId;",
      "export const getIsLoading = state => state.isLoading;",
      ""
    ],
    "description": "Selectors Boilerplate"
  }
}
